Microsoft (R) Macro Assembler Version 14.29.30147.0	    11/16/22 21:21:29
wordle.asm						     Page 1 - 1


				;--------------------------------------------------------
				; Authors: Spencer Hirsch, shirsch2020@my.fit.edu, James
				;          Pabisz, jpabisz2020@my.fit.edu
				; Program: Wordle in Assembly (Contest 1)
				; Course: Computer Architecture and Assembly, Fall 2022
				;--------------------------------------------------------

				.386
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;-------------------------------------------------------
				; Macro used to convert all of the characters in a given
				; string to uppercase. So that the inputs will always
				; match regardless of case.
				;-------------------------------------------------------
				ToUpper MACRO char
				 mov esi, char                  ; Move string to reg
				 mov ecx, 5                     ; Counter for loop
				 StandardizeCase:
				  mov al, [esi]
				  cmp al, 0                     ; Do comparison
				  je OutLoop                    
				  cmp al, 'a'
				  jb NextLetter                 ; Jump
				  cmp al, 'z'
				  ja NextLetter                 ; Jump
				  and BYTE PTR [esi], 11011111b
				  
				 NextLetter:                    ; Move to next letter
				  inc esi                       ; in string
				  jmp StandardizeCase
				 
				 OutLoop:                  
				  mov ecx, 0
				ENDM
				 
 00000000			.data
				;--------------------------------------------------------
				; All of the messages displayed to the user upon
				; beginning the program.
				;--------------------------------------------------------
 00000000 57 65 6C 63 6F	intro BYTE "Welcome to WORDLE!",0
	   6D 65 20 74 6F
	   20 57 4F 52 44
	   4C 45 21 00
 00000013 54 68 65 20 72	ruleIntro BYTE "The rules of the game are simple:",0
	   75 6C 65 73 20
	   6F 66 20 74 68
	   65 20 67 61 6D
	   65 20 61 72 65
	   20 73 69 6D 70
	   6C 65 3A 00
 00000035 47 72 65 65 6E	green_message BYTE "Green: Letter included in string, correct placement.",0
	   3A 20 4C 65 74
	   74 65 72 20 69
	   6E 63 6C 75 64
	   65 64 20 69 6E
	   20 73 74 72 69
	   6E 67 2C 20 63
	   6F 72 72 65 63
	   74 20 70 6C 61
	   63 65 6D 65 6E
	   74 2E 00
 0000006A 59 65 6C 6C 6F	yellow_message BYTE "Yellow: Letter included in string, incorrect placement.",0
	   77 3A 20 4C 65
	   74 74 65 72 20
	   69 6E 63 6C 75
	   64 65 64 20 69
	   6E 20 73 74 72
	   69 6E 67 2C 20
	   69 6E 63 6F 72
	   72 65 63 74 20
	   70 6C 61 63 65
	   6D 65 6E 74 2E
	   00
 000000A2 52 65 64 3A 20	red_message BYTE "Red: Letter is not included within the string.",0
	   4C 65 74 74 65
	   72 20 69 73 20
	   6E 6F 74 20 69
	   6E 63 6C 75 64
	   65 64 20 77 69
	   74 68 69 6E 20
	   74 68 65 20 73
	   74 72 69 6E 67
	   2E 00
 000000D1 31 2E 20 54 68	rule1 BYTE "1. This is more fun with two people, therefore, a two player game.",0
	   69 73 20 69 73
	   20 6D 6F 72 65
	   20 66 75 6E 20
	   77 69 74 68 20
	   74 77 6F 20 70
	   65 6F 70 6C 65
	   2C 20 74 68 65
	   72 65 66 6F 72
	   65 2C 20 61 20
	   74 77 6F 20 70
	   6C 61 79 65 72
	   20 67 61 6D 65
	   2E 00
 00000114 32 2E 20 4F 6E	rule2 BYTE "2. One user must input a word for the other to guess.",0
	   65 20 75 73 65
	   72 20 6D 75 73
	   74 20 69 6E 70
	   75 74 20 61 20
	   77 6F 72 64 20
	   66 6F 72 20 74
	   68 65 20 6F 74
	   68 65 72 20 74
	   6F 20 67 75 65
	   73 73 2E 00
 0000014A 33 2E 20 54 68	rule3 BYTE "3. The inputted word must be 5 characters.",0
	   65 20 69 6E 70
	   75 74 74 65 64
	   20 77 6F 72 64
	   20 6D 75 73 74
	   20 62 65 20 35
	   20 63 68 61 72
	   61 63 74 65 72
	   73 2E 00
 00000175 34 2E 20 49 66	rule4 BYTE "4. If a string exceeds 5 characters the remaining characters will be dropped.",0
	   20 61 20 73 74
	   72 69 6E 67 20
	   65 78 63 65 65
	   64 73 20 35 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 74 68 65 20
	   72 65 6D 61 69
	   6E 69 6E 67 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 77 69 6C 6C
	   20 62 65 20 64
	   72 6F 70 70 65
	   64 2E 00
 000001C3 35 2E 20 49 66	rule5 BYTE "5. If a string contains less than 5 characters the game ends.",0
	   20 61 20 73 74
	   72 69 6E 67 20
	   63 6F 6E 74 61
	   69 6E 73 20 6C
	   65 73 73 20 74
	   68 61 6E 20 35
	   20 63 68 61 72
	   61 63 74 65 72
	   73 20 74 68 65
	   20 67 61 6D 65
	   20 65 6E 64 73
	   2E 00
 00000201 36 2E 20 59 6F	rule6 BYTE "6. You only have 6 chances to figure out the word.",0
	   75 20 6F 6E 6C
	   79 20 68 61 76
	   65 20 36 20 63
	   68 61 6E 63 65
	   73 20 74 6F 20
	   66 69 67 75 72
	   65 20 6F 75 74
	   20 74 68 65 20
	   77 6F 72 64 2E
	   00
 00000234 37 2E 20 54 68	rule7 BYTE "7. There are a possible 600 points to score.",0
	   65 72 65 20 61
	   72 65 20 61 20
	   70 6F 73 73 69
	   62 6C 65 20 36
	   30 30 20 70 6F
	   69 6E 74 73 20
	   74 6F 20 73 63
	   6F 72 65 2E 00

				;--------------------------------------------------------
				; All of the potential messages that are used upon the 
				; completion of the program.
				;--------------------------------------------------------
 00000261 47 6F 6F 64 20	luck BYTE "Good Luck!",0
	   4C 75 63 6B 21
	   00
 0000026C 42 65 74 74 65	fail BYTE "Better Luck Next Time!",0
	   72 20 4C 75 63
	   6B 20 4E 65 78
	   74 20 54 69 6D
	   65 21 00
 00000283 69 6E 74 65 72	attempt1 BYTE "interesting... ig good job",0
	   65 73 74 69 6E
	   67 2E 2E 2E 20
	   69 67 20 67 6F
	   6F 64 20 6A 6F
	   62 00
 0000029E 57 6F 77 21 20	pass BYTE "Wow! That Was Impressive!",0
	   54 68 61 74 20
	   57 61 73 20 49
	   6D 70 72 65 73
	   73 69 76 65 21
	   00
 000002B8 54 68 61 74 20	ok_message BYTE "That was ok, you can do better.",0
	   77 61 73 20 6F
	   6B 2C 20 79 6F
	   75 20 63 61 6E
	   20 64 6F 20 62
	   65 74 74 65 72
	   2E 00
 000002D8 59 6F 75 20 73	score_message BYTE "You scored: ",0
	   63 6F 72 65 64
	   3A 20 00
 000002E5 20 50 6F 69 6E	points_message BYTE " Points",0
	   74 73 00
 000002ED 2D 31 30 30 20	minus_points BYTE "-100 Points!",0
	   50 6F 69 6E 74
	   73 21 00
 000002FA 50 6F 74 65 6E	current_points BYTE "Potential points: ",0
	   74 69 61 6C 20
	   70 6F 69 6E 74
	   73 3A 20 00
 0000030D 54 68 65 20 69	not_valid BYTE "The inputted string is of an invalid size.",0
	   6E 70 75 74 74
	   65 64 20 73 74
	   72 69 6E 67 20
	   69 73 20 6F 66
	   20 61 6E 20 69
	   6E 76 61 6C 69
	   64 20 73 69 7A
	   65 2E 00
 00000338 54 68 65 20 63	correct_word BYTE "The correct word was: ",0
	   6F 72 72 65 63
	   74 20 77 6F 72
	   64 20 77 61 73
	   3A 20 00

 0000034F 00000258		points DWORD 600      ; Initial number of potential points

				;--------------------------------------------------------
				; Messages displayed to the use once the program begins
				; taking input during gameplay.
				;--------------------------------------------------------
 00000353 49 6E 70 75 74	input_string BYTE "Input: ",0
	   3A 20 00
 0000035B 41 74 74 65 6D	attempt_string BYTE "Attempt: ",0
	   70 74 3A 20 00

				;--------------------------------------------------------
				; Variable that is used to store the user input from the 
				; ReadString function. Limit on the number of characters 
				; that can be read from the user by setting size to 5 plus 
				; the null pointer.
				;--------------------------------------------------------
 00000365  00000006 [		user_input BYTE 6 DUP(?)
	    00
	   ]

				;--------------------------------------------------------
				; String given by the user when the program begins, this 
				; is the string that will be used for comparisons from the 
				; user input
				;--------------------------------------------------------
 0000036B  00000006 [		true_string BYTE 6 DUP(?)
	    00
	   ]
 00000371 49 6E 70 75 74	prompt_message BYTE "Input expected String (INPUT IS HIDDEN): ",0
	   20 65 78 70 65
	   63 74 65 64 20
	   53 74 72 69 6E
	   67 20 28 49 4E
	   50 55 54 20 49
	   53 20 48 49 44
	   44 45 4E 29 3A
	   20 00

 0000039B 01			index BYTE 1        ; Used for number of attempts

 00000000			.code
				;--------------------------------------------------------
				;                         Main PROC
				; Used as a driver for the program. Call all of the
				; necessary procedures for the program to execute 
				; properly. Calculates the number of attempts as well as
				; the number of points a user can receive.
				;--------------------------------------------------------
 00000000			main PROC
				 ; Call the procedures
 00000000  E8 000000F6		 call OutputLoad                ; Show loading screen
 00000005  E8 0000022B		 call CollectString             ; Take string from user
 0000000A  E8 00000000 E	 call WaitMsg                
 0000000F  E8 00000000 E	 call Crlf
 00000014  E8 00000000 E	 call Crlf 

 00000019  A0 0000039B R	 mov al, index                  ; Initialize number of attempts
 0000001E  BF 00000006		 mov edi,6                      ; Loop decrement varialbe

				;--------------------------------------------------------
				; Driver loop that takes care of the number of attempts
				; of the user. Calculates the number of points the user
				; has earned as well as the number of attempts the user
				; has taken.
				;--------------------------------------------------------
 00000023			 L1:
 00000023  BA 0000035B R	  mov edx, OFFSET attempt_string
 00000028  E8 00000000 E	  call WriteString          
 0000002D  E8 00000000 E	  call WriteInt             ; Write the number of attempts
				                            ; to console
 00000032  E8 00000000 E	  call Crlf
 00000037  57			  push edi                  ; Save values to stack
 00000038  50			  push eax
 00000039  E8 00000292		  call ProcessInput         ; Take input from user and process
				                            ; it accordingly

 0000003E  A1 0000034F R	  mov eax, points           ; Do point calculations based on
 00000043  83 E8 64		  sub eax, 100              ; number of attempts
 00000046  A3 0000034F R	  mov points, eax
 0000004B  BA 000002FA R	  mov edx, OFFSET current_points
 00000050  E8 00000000 E	  call WriteString          
 00000055  A1 0000034F R	  mov eax, points
 0000005A  E8 00000000 E	  call WriteInt             ; Print number of points to console
 0000005F  BA 000002E5 R	  mov edx, OFFSET points_message
 00000064  E8 00000000 E	  call WriteString
 00000069  E8 00000000 E	  call Crlf
 0000006E  E8 00000000 E	  call Crlf
 00000073  58			  pop eax		            ; Remove value from the stack
 00000074  FE C0		  inc al
 00000076  A2 0000039B R	  mov index, al             ; Load the current index into variable
 0000007B  5F			  pop edi                   ; Remove value from the stack
 0000007C  4F			  dec edi                   ; Decrement loop counter
 0000007D  75 A4		  jnz L1

 0000007F  B8 0000000C		mov eax, (black*16) + lightRed
 00000084  E8 00000000 E	call SetTextColor           
 00000089  BA 0000026C R	mov edx, OFFSET fail
 0000008E  E8 00000000 E	call WriteString            ; Write faile message
 00000093  E8 00000000 E	call Crlf
 00000098  BA 000002D8 R	mov edx, OFFSET score_message
 0000009D  E8 00000000 E	call WriteString            
 000000A2  B0 00		mov al, 0
 000000A4  E8 00000000 E	call WriteInt
 000000A9  BA 000002E5 R	mov edx, OFFSET points_message
 000000AE  E8 00000000 E	call WriteString            ; Write number of points
				                            ; to the console
 000000B3  E8 00000000 E	call Crlf
 000000B8  E8 00000000 E	call Crlf
 000000BD  B8 0000000F		mov eax, (black*16) + white
 000000C2  E8 00000000 E	call SetTextColor
 000000C7  BA 00000338 R	mov edx, OFFSET correct_word
 000000CC  E8 00000000 E	call WriteString
 000000D1  B8 0000000A		mov eax, (black*16) + lightGreen
 000000D6  E8 00000000 E	call SetTextColor
 000000DB  BA 0000036B R	mov edx, OFFSET true_string
 000000E0  E8 00000000 E	call WriteString
 000000E5  B8 0000001F		mov eax, (black+16) + white
 000000EA  E8 00000000 E	call SetTextColor
 000000EF  E8 00000000 E	call Crlf
				INVOKE ExitProcess,0       ; Once done, exit the program
 000000F4  6A 00	   *	    push   +000000000h
 000000F6  E8 00000000 E   *	    call   ExitProcess
 000000FB			main ENDP


				;--------------------------------------------------------
				;					OutputLoad PROC
				; Function outputs the rules of the game to the console
				; before waiting for user input. Allows the user to 
				; understand how to play the game.
				;--------------------------------------------------------
 000000FB			OutputLoad PROC
 000000FB  B8 0000000D		 mov eax, (black*16) + lightMagenta
 00000100  E8 00000000 E	 call SetTextColor
 00000105  B2 19		 mov dl,25					; Change the position of the 
				                            ; text written to the console
 00000107  B6 00		 mov dh,0
 00000109  E8 00000000 E	 call GotoXY		
 0000010E  BA 00000000 R	 mov edx, OFFSET intro
 00000113  E8 00000000 E	 call WriteString			; Write the intro message
 00000118  E8 00000000 E	 call Crlf
 0000011D  E8 00000000 E	 call Crlf
 00000122  BA 00000013 R	 mov edx, OFFSET ruleIntro	; Write the rule introduction
 00000127  E8 00000000 E	 call WriteString
 0000012C  E8 00000000 E	 call Crlf
 00000131  E8 00000000 E	 call Crlf
				;--------------------------------------------------------
				; Output the various rules of the program to the console
				; before it prompts the user for input.
				;--------------------------------------------------------
 00000136  B8 0000000A		 mov eax, (black*16) + lightGreen
 0000013B  E8 00000000 E	 call SetTextColor
 00000140  BA 00000035 R	 mov edx, OFFSET green_message
 00000145  E8 00000000 E	 call WriteString
 0000014A  E8 00000000 E	 call Crlf
 0000014F  B8 0000000E		 mov eax, (black*16) + yellow
 00000154  E8 00000000 E	 call SetTextColor
 00000159  BA 0000006A R	 mov edx, OFFSET yellow_message
 0000015E  E8 00000000 E	 call WriteString
 00000163  E8 00000000 E	 call Crlf
 00000168  B8 0000000C		 mov eax, (black*16) + lightRed
 0000016D  E8 00000000 E	 call SetTextColor
 00000172  BA 000000A2 R	 mov edx, OFFSET red_message
 00000177  E8 00000000 E	 call WriteString
 0000017C  E8 00000000 E	 call Crlf
 00000181  E8 00000000 E	 call Crlf
 00000186  B8 00000003		 mov eax, (black*16) + cyan
 0000018B  E8 00000000 E	 call SetTextColor
 00000190  BA 000000D1 R	 mov edx, OFFSET rule1		
 00000195  E8 00000000 E	 call WriteString
 0000019A  E8 00000000 E	 call Crlf
 0000019F  BA 00000114 R	 mov edx, OFFSET rule2		
 000001A4  E8 00000000 E	 call WriteString
 000001A9  E8 00000000 E	 call Crlf
 000001AE  BA 0000014A R	 mov edx, OFFSET rule3
 000001B3  E8 00000000 E	 call WriteString
 000001B8  E8 00000000 E	 call Crlf
 000001BD  BA 00000175 R	 mov edx, OFFSET rule4		
 000001C2  E8 00000000 E	 call WriteString
 000001C7  E8 00000000 E	 call Crlf
 000001CC  BA 000001C3 R	 mov edx, OFFSET rule5		
 000001D1  E8 00000000 E	 call WriteString
 000001D6  E8 00000000 E	 call Crlf
 000001DB  BA 00000201 R	 mov edx, OFFSET rule6
 000001E0  E8 00000000 E	 call WriteString
 000001E5  E8 00000000 E	 call Crlf
 000001EA  BA 00000234 R	 mov edx, OFFSET rule7		
 000001EF  E8 00000000 E	 call WriteString
 000001F4  E8 00000000 E	 call Crlf
 000001F9  E8 00000000 E	 call Crlf
 000001FE  E8 00000000 E	 call Crlf
 00000203  B2 1D		 mov dl,29
 00000205  B6 11		 mov dh,17
 00000207  E8 00000000 E	 call GoToXY                ; Change position
 0000020C  B8 0000000D		 mov eax, (black*16) + lightMagenta
 00000211  E8 00000000 E	 call SetTextColor
 00000216  BA 00000261 R	 mov edx, OFFSET luck		; Output final message
 0000021B  E8 00000000 E	 call WriteString
 00000220  E8 00000000 E	 call Crlf
 00000225  E8 00000000 E	 call Crlf
 0000022A  B8 0000000F		 mov eax, (black*16) + white
 0000022F  E8 00000000 E	 call SetTextColor          ; Revert color back
 00000234  C3			 ret
 00000235			OutputLoad ENDP


				;--------------------------------------------------------
				;				    CollectString PROC
				; Procedure that takes input for the value of the string
				; that the comparisons will be paried against.
				;--------------------------------------------------------
 00000235			CollectString PROC
 00000235  BA 00000371 R	 mov edx, OFFSET prompt_message
 0000023A  E8 00000000 E	 call WriteString			; Output message		 
 0000023F  B8 00000000		 mov eax, (black*16) + black
 00000244  E8 00000000 E	 call SetTextColor			; Hide input from user
 00000249  BA 0000036B R	 mov edx, OFFSET true_string
 0000024E  B9 00000006		 mov ecx, (LENGTHOF true_string)
 00000253  E8 00000000 E	 call ReadString            ; Read input
				 ToUpper edx                ; Call toUpper macro
 00000258  8B F2	     1	 mov esi, edx                  ; Move string to reg
 0000025A  B9 00000005	     1	 mov ecx, 5                     ; Counter for loop
 0000025F		     1	 StandardizeCase:
 0000025F  8A 06	     1	  mov al, [esi]
 00000261  3C 00	     1	  cmp al, 0                     ; Do comparison
 00000263  74 0E	     1	  je OutLoop                    
 00000265  3C 61	     1	  cmp al, 'a'
 00000267  72 07	     1	  jb NextLetter                 ; Jump
 00000269  3C 7A	     1	  cmp al, 'z'
 0000026B  77 03	     1	  ja NextLetter                 ; Jump
 0000026D  80 26 DF	     1	  and BYTE PTR [esi], 11011111b
 00000270		     1	 NextLetter:                    ; Move to next letter
 00000270  46		     1	  inc esi                       ; in string
 00000271  EB EC	     1	  jmp StandardizeCase
 00000273		     1	 OutLoop:                  
 00000273  B9 00000000	     1	  mov ecx, 0
 00000278  B8 0000000F		 mov eax, (black*16) + white
 0000027D  E8 00000000 E	 call SetTextColor			; Revert text color to white
 00000282  BF 0000036B R	 mov edi, OFFSET [true_string]
 00000287  B9 00000005		 mov ecx, LENGTHOF true_string - 1
 0000028C  E8 00000006		 call IsValid		        ; Check if input length is valid
 00000291  E8 00000000 E	 call Crlf
 00000296  C3			 ret                        ; Return back to callee proc
 00000297			CollectString ENDP


				;--------------------------------------------------------
				;                   IsValid PROC
				; Check validity of the inputted strings. If strings are
				; determined to be invalid. Exit the program. The user
				; must ensure that the length of the string meets the 
				; requirements.
				;--------------------------------------------------------
 00000297			IsValid PROC
 00000297  B0 00		 mov al, 0h                 ; Move null character to register
 00000299  FC			 cld
 0000029A  F2/ AE		 repne scasb                ; Search string for null
 0000029C  75 31		 jnz Return                 ; If not found
 0000029E  74 00		 jz NotValid                ; If found
				 
 000002A0			 NotValid:
 000002A0  E8 00000000 E	  call Crlf
 000002A5  B8 0000000C		  mov eax,(black*16) + lightRed  
 000002AA  E8 00000000 E	  call SetTextColor         ; Change text to red
 000002AF  BA 0000030D R	  mov edx, OFFSET not_valid 
 000002B4  E8 00000000 E	  call WriteString          ; Write invalid message
 000002B9  B8 0000000F		  mov eax,(black*16) + white
 000002BE  E8 00000000 E	  call SetTextColor         ; Rever color
 000002C3  E8 00000000 E	  call Crlf
				  INVOKE ExitProcess,0      ; Exit the program
 000002C8  6A 00	   *	    push   +000000000h
 000002CA  E8 00000000 E   *	    call   ExitProcess
				   
 000002CF			 Return:
 000002CF  C3			  ret                       ; Return to callee
 000002D0			IsValid ENDP
				 

				;--------------------------------------------------------
				;					ProcessInput PROC
				; Procedure takes input from the user and compares it to
				; a selected word from the list provided to check for
				; the correctness of the users inputted value.
				;--------------------------------------------------------
 000002D0			ProcessInput PROC
 000002D0  BA 00000353 R	 mov edx, OFFSET input_string       
 000002D5  E8 00000000 E	 call WriteString           ; Output input header

 000002DA  BA 00000365 R	 mov edx, OFFSET user_input         
 000002DF  B9 00000006		 mov ecx, (LENGTHOF user_input) 
 000002E4  E8 00000000 E	 call ReadString            ; Take user input
				 
				 ToUpper edx                ; Call toUpper macro
 000002E9  8B F2	     1	 mov esi, edx                  ; Move string to reg
 000002EB  B9 00000005	     1	 mov ecx, 5                     ; Counter for loop
 000002F0		     1	 StandardizeCase:
 000002F0  8A 06	     1	  mov al, [esi]
 000002F2  3C 00	     1	  cmp al, 0                     ; Do comparison
 000002F4  74 0E	     1	  je OutLoop                    
 000002F6  3C 61	     1	  cmp al, 'a'
 000002F8  72 07	     1	  jb NextLetter                 ; Jump
 000002FA  3C 7A	     1	  cmp al, 'z'
 000002FC  77 03	     1	  ja NextLetter                 ; Jump
 000002FE  80 26 DF	     1	  and BYTE PTR [esi], 11011111b
 00000301		     1	 NextLetter:                    ; Move to next letter
 00000301  46		     1	  inc esi                       ; in string
 00000302  EB EC	     1	  jmp StandardizeCase
 00000304		     1	 OutLoop:                  
 00000304  B9 00000000	     1	  mov ecx, 0

 00000309  BF 00000365 R	 mov edi, OFFSET [user_input]
 0000030E  B9 00000005		 mov ecx, LENGTHOF user_input - 1 
 00000313  E8 FFFFFF7F		 call IsValid               ; Check to see if input is
				                            ; valid

 00000318  BA 0000035B R	 mov edx, OFFSET attempt_string     
 0000031D  E8 00000000 E	 call WriteString           ; Output attempt header
				 
				 ; Initialize register values with input from the users
 00000322  BF 0000036B R	 mov edi, OFFSET [true_string]      
 00000327  BE 00000365 R	 mov esi, OFFSET [user_input]
				 
 0000032C  B9 00000006		 mov ecx, LENGTHOF true_string
 00000331  F3/ A6		 repe cmpsb                 ; Check to see if strings match 
 00000333  83 F9 00		 cmp ecx, 0
 00000336  74 06		 je CompleteEqual           ; If equal output to user and 
				                            ; terminate program
 00000338  0F 85 00000090	 jne NotEqual               ; If not jump to NotEqual


				;--------------------------------------------------------
				; If compare function jumps, the strings are exact
				; matches. In this case, output the number of points to
				; the user and congratulate. Once, completed. Terminate
				; the program.
				;--------------------------------------------------------
 0000033E			 CompleteEqual:            
 0000033E  B8 0000000A		  mov eax,(black*16) + lightGreen 
 00000343  E8 00000000 E	  call SetTextColor         ; Change text color to light green
 00000348  BA 00000365 R	  mov edx, OFFSET user_input
 0000034D  E8 00000000 E	  call WriteString          ; Print user inputted value
 00000352  E8 00000000 E	  call Crlf
 00000357  E8 00000000 E	  call Crlf

 0000035C  A1 0000034F R	  mov eax, points
				  
 00000361  3D 00000258		  cmp eax, 600              ; Determine output based on 
 00000366  74 09		  je Impossible             ; number of points acquired
 00000368  3D 0000012C		  cmp eax, 300
 0000036D  73 0E		  jae Good
 0000036F  72 18		  jb Ok
				  
 00000371			  Impossible:               ; If guessed correctly first try
 00000371  BA 00000283 R	   mov edx, OFFSET attempt1
 00000376  E8 00000000 E	   call WriteString         ; Write string
 0000037B  EB 18		   jmp Break               
				  
 0000037D			  Good:                     ; If gotten within four tries
 0000037D  BA 0000029E R	   mov edx, OFFSET pass
 00000382  E8 00000000 E	   call WriteString         ; Write string
 00000387  EB 0C		   jmp Break
				  
 00000389			  Ok:                       ; If gotten in 5 or 6 tries
 00000389  BA 000002B8 R	   mov edx, OFFSET ok_message
 0000038E  E8 00000000 E	   call WriteString         ; Write string
 00000393  EB 00		   jmp Break
				  
 00000395			  Break:                    ; Output messages to user, terminate
 00000395  B8 0000000F		   mov eax, (black*16) + white
 0000039A  E8 00000000 E	   call SetTextColor        ; Revert textcolor
 0000039F  E8 00000000 E	   call Crlf
 000003A4  BA 000002D8 R	   mov edx, OFFSET score_message
 000003A9  E8 00000000 E	   call WriteString         ; Output leading score message
 000003AE  A1 0000034F R	   mov eax, points          
 000003B3  E8 00000000 E	   call WriteInt            ; Output number of points
 000003B8  BA 000002E5 R	   mov edx, OFFSET points_message
 000003BD  E8 00000000 E	   call WriteString         ; Follow by the unit (Points)
 000003C2  E8 00000000 E	   call Crlf
				   INVOKE ExitProcess,0     ; Terminate the program
 000003C7  6A 00	   *	    push   +000000000h
 000003C9  E8 00000000 E   *	    call   ExitProcess

				;--------------------------------------------------------
				; If the input did not match the correct string. Iterate 
				; through the two strings and determine the color of the
				; character to output to the console.Once completed return 
				; to main and continue iterating through the program until
				; either, the correct string is inputted or the number of 
				; tries has run out.
				;--------------------------------------------------------

 000003CE			 NotEqual:                  ; If complete equality was not acheived
 000003CE  BF 00000365 R	  mov edi, OFFSET [user_input]       ; Reinitialize registers
 000003D3  BE 0000036B R	  mov esi, OFFSET [true_string]
 000003D8  B1 01		  mov cl, 1                 ; Initialize counter register
 000003DA			  outer:                    ; Iterate through characters in string
 000003DA  8A 07		   mov al, [edi]            ; Byte comparison for strings
 000003DC  8A 16		   mov dl, [esi]
 000003DE  3A C2		   cmp al, dl               ; Check for equality
 000003E0  74 02		   je DirectMatch           ; If character match
 000003E2  75 1D		   jne PotentialMatch       ; Else

 000003E4			   DirectMatch:             ; Given that the characters match
 000003E4  B8 0000000A		    mov eax,(black*16) + lightGreen
 000003E9  E8 00000000 E	    call SetTextColor       ; Change text color
 000003EE  8A 07		    mov al, [edi]
 000003F0  E8 00000000 E	    call WriteChar          ; Output character
 000003F5  B8 0000000F		    mov eax,(black*16) + white
 000003FA  E8 00000000 E	    call SetTextColor       ; Revert text color
 000003FF  EB 55		    jmp Escape              ; Jump to Escape

 00000401			   PotentialMatch:          ; Check to see if instance of character
 00000401  8A 07		    mov al, [edi]           ; exists within the user inputted string
 00000403  56			    push esi                
 00000404  57			    push edi                ; Store values on stack
 00000405  51			    push ecx
 00000406  BF 0000036B R	    mov edi, OFFSET [true_string]
 0000040B  B9 00000006		    mov ecx, LENGTHOF true_string 
 00000410  FC			    cld
 00000411  F2/ AE		    repne scasb             ; Check for instance of inputted character
 00000413  59			    pop ecx                 ; in given string
 00000414  5F			    pop edi
 00000415  5E			    pop esi                 ; Pop all of the values from the stack
 00000416  8A 07		    mov al, [edi]
 00000418  75 1F		    jnz NotFound            ; If no instance of character
 0000041A  74 00		    jz Found                ; Else

 0000041C			   Found:                   ; If character exists within the string
 0000041C  B8 0000000E		    mov eax,(black*16) + yellow
 00000421  E8 00000000 E	    call SetTextColor       ; Change text color
 00000426  8A 07		    mov al, [edi]
 00000428  E8 00000000 E	    call WriteChar          ; Output character
 0000042D  B8 0000000F		    mov eax,(black*16) + white
 00000432  E8 00000000 E	    call SetTextColor       ; Revert text color
 00000437  EB 1D		    jmp Escape              ; Jump to escape

 00000439			   NotFound:                ; If not instance of character is found
 00000439  B8 0000000C		    mov eax,(black*16) + lightRed
 0000043E  E8 00000000 E	    call SetTextColor       ; Change color of output
 00000443  8A 07		    mov al, [edi]       
 00000445  E8 00000000 E	    call WriteChar          ; Write character to console
 0000044A  B8 0000000F		    mov eax,(black*16) + white
 0000044F  E8 00000000 E	    call SetTextColor       ; Revert text color
 00000454  EB 00		    jmp Escape              ; Jump to escape

 00000456			   Escape:                  ; Increment the loop until no longer
 00000456  46			    inc esi                 ; valid. Check every characeter in
 00000457  47			    inc edi                 ; string.
 00000458  FE C1		    inc cl
 0000045A  80 F9 06		    cmp cl, 6
 0000045D  0F 85 FFFFFF77	    jne outer

 00000463  E8 00000000 E	 call Crlf
 00000468  E8 00000000 E	 call Crlf
 0000046D  BA 000002ED R	 mov edx, OFFSET minus_points
 00000472  E8 00000000 E	 call WriteString           ; Out number of points lost
 00000477  E8 00000000 E	 call Crlf
 0000047C  C3			 ret                        ; Return to driver loop in main PROC
 0000047D			ProcessInput ENDP
				END main

Microsoft (R) Macro Assembler Version 14.29.30147.0	    11/16/22 21:21:29
wordle.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

ToUpper  . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000039C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000047D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CollectString  . . . . . . . . .	P Near	 00000235 _TEXT	Length= 00000062 Public STDCALL
  StandardizeCase  . . . . . . .	L Near	 0000025F _TEXT	
  NextLetter . . . . . . . . . .	L Near	 00000270 _TEXT	
  OutLoop  . . . . . . . . . . .	L Near	 00000273 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsValid  . . . . . . . . . . . .	P Near	 00000297 _TEXT	Length= 00000039 Public STDCALL
  NotValid . . . . . . . . . . .	L Near	 000002A0 _TEXT	
  Return . . . . . . . . . . . .	L Near	 000002CF _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputLoad . . . . . . . . . . .	P Near	 000000FB _TEXT	Length= 0000013A Public STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ProcessInput . . . . . . . . . .	P Near	 000002D0 _TEXT	Length= 000001AD Public STDCALL
  StandardizeCase  . . . . . . .	L Near	 000002F0 _TEXT	
  NextLetter . . . . . . . . . .	L Near	 00000301 _TEXT	
  OutLoop  . . . . . . . . . . .	L Near	 00000304 _TEXT	
  CompleteEqual  . . . . . . . .	L Near	 0000033E _TEXT	
  Impossible . . . . . . . . . .	L Near	 00000371 _TEXT	
  Good . . . . . . . . . . . . .	L Near	 0000037D _TEXT	
  Ok . . . . . . . . . . . . . .	L Near	 00000389 _TEXT	
  Break  . . . . . . . . . . . .	L Near	 00000395 _TEXT	
  NotEqual . . . . . . . . . . .	L Near	 000003CE _TEXT	
  outer  . . . . . . . . . . . .	L Near	 000003DA _TEXT	
  DirectMatch  . . . . . . . . .	L Near	 000003E4 _TEXT	
  PotentialMatch . . . . . . . .	L Near	 00000401 _TEXT	
  Found  . . . . . . . . . . . .	L Near	 0000041C _TEXT	
  NotFound . . . . . . . . . . .	L Near	 00000439 _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000456 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000FB Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
attempt1 . . . . . . . . . . . .	Byte	 00000283 _DATA	
attempt_string . . . . . . . . .	Byte	 0000035B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correct_word . . . . . . . . . .	Byte	 00000338 _DATA	
current_points . . . . . . . . .	Byte	 000002FA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 0000026C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green_message  . . . . . . . . .	Byte	 00000035 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
index  . . . . . . . . . . . . .	Byte	 0000039B _DATA	
input_string . . . . . . . . . .	Byte	 00000353 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
luck . . . . . . . . . . . . . .	Byte	 00000261 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus_points . . . . . . . . . .	Byte	 000002ED _DATA	
not_valid  . . . . . . . . . . .	Byte	 0000030D _DATA	
ok_message . . . . . . . . . . .	Byte	 000002B8 _DATA	
pass . . . . . . . . . . . . . .	Byte	 0000029E _DATA	
points_message . . . . . . . . .	Byte	 000002E5 _DATA	
points . . . . . . . . . . . . .	DWord	 0000034F _DATA	
prompt_message . . . . . . . . .	Byte	 00000371 _DATA	
red_message  . . . . . . . . . .	Byte	 000000A2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rule1  . . . . . . . . . . . . .	Byte	 000000D1 _DATA	
rule2  . . . . . . . . . . . . .	Byte	 00000114 _DATA	
rule3  . . . . . . . . . . . . .	Byte	 0000014A _DATA	
rule4  . . . . . . . . . . . . .	Byte	 00000175 _DATA	
rule5  . . . . . . . . . . . . .	Byte	 000001C3 _DATA	
rule6  . . . . . . . . . . . . .	Byte	 00000201 _DATA	
rule7  . . . . . . . . . . . . .	Byte	 00000234 _DATA	
ruleIntro  . . . . . . . . . . .	Byte	 00000013 _DATA	
score_message  . . . . . . . . .	Byte	 000002D8 _DATA	
true_string  . . . . . . . . . .	Byte	 0000036B _DATA	
user_input . . . . . . . . . . .	Byte	 00000365 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow_message . . . . . . . . .	Byte	 0000006A _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
