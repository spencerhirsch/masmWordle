Microsoft (R) Macro Assembler Version 14.29.30147.0	    11/27/22 22:01:48
wordle.asm						     Page 1 - 1


				;--------------------------------------------------------
				; Authors: Spencer Hirsch, shirsch2020@my.fit.edu, James
				;          Pabisz, jpabisz2020@my.fit.edu
				; Program: Wordle in Assembly (Contest 1)
				; Course: Computer Architecture and Assembly, Fall 2022
				;--------------------------------------------------------

				.386
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;-------------------------------------------------------
				; Macro used to convert all of the characters in a given
				; string to uppercase. So that the inputs will always
				; match regardless of case.
				;-------------------------------------------------------
				ToUpper MACRO char
				 mov esi, char                  ; Move string to reg
				 mov ecx, 5                     ; Counter for loop
				 StandardizeCase:
				  mov al, [esi]
				  cmp al, 0                     ; Do comparison
				  je OutLoop                    
				  cmp al, 'a'
				  jb NextLetter                 ; Jump
				  cmp al, 'z'
				  ja NextLetter                 ; Jump
				  and BYTE PTR [esi], 11011111b
				  
				 NextLetter:                    ; Move to next letter
				  inc esi                       ; in string
				  jmp StandardizeCase
				 
				 OutLoop:                  
				  mov ecx, 0
				ENDM
				 
 00000000			.data
				;--------------------------------------------------------
				; All of the messages displayed to the user upon
				; beginning the program.
				;--------------------------------------------------------
 00000000 57 65 6C 63 6F	intro BYTE "Welcome to WORDLE!",0
	   6D 65 20 74 6F
	   20 57 4F 52 44
	   4C 45 21 00
 00000013 54 68 65 20 72	ruleIntro BYTE "The rules of the game are simple:",0
	   75 6C 65 73 20
	   6F 66 20 74 68
	   65 20 67 61 6D
	   65 20 61 72 65
	   20 73 69 6D 70
	   6C 65 3A 00
 00000035 47 72 65 65 6E	green_message BYTE "Green: Letter included in string, correct placement.",0
	   3A 20 4C 65 74
	   74 65 72 20 69
	   6E 63 6C 75 64
	   65 64 20 69 6E
	   20 73 74 72 69
	   6E 67 2C 20 63
	   6F 72 72 65 63
	   74 20 70 6C 61
	   63 65 6D 65 6E
	   74 2E 00
 0000006A 59 65 6C 6C 6F	yellow_message BYTE "Yellow: Letter included in string, incorrect placement.",0
	   77 3A 20 4C 65
	   74 74 65 72 20
	   69 6E 63 6C 75
	   64 65 64 20 69
	   6E 20 73 74 72
	   69 6E 67 2C 20
	   69 6E 63 6F 72
	   72 65 63 74 20
	   70 6C 61 63 65
	   6D 65 6E 74 2E
	   00
 000000A2 52 65 64 3A 20	red_message BYTE "Red: Letter is not included within the string.",0
	   4C 65 74 74 65
	   72 20 69 73 20
	   6E 6F 74 20 69
	   6E 63 6C 75 64
	   65 64 20 77 69
	   74 68 69 6E 20
	   74 68 65 20 73
	   74 72 69 6E 67
	   2E 00
 000000D1 31 2E 20 54 68	rule1 BYTE "1. This is more fun with two people, therefore, a two player game.",0
	   69 73 20 69 73
	   20 6D 6F 72 65
	   20 66 75 6E 20
	   77 69 74 68 20
	   74 77 6F 20 70
	   65 6F 70 6C 65
	   2C 20 74 68 65
	   72 65 66 6F 72
	   65 2C 20 61 20
	   74 77 6F 20 70
	   6C 61 79 65 72
	   20 67 61 6D 65
	   2E 00
 00000114 32 2E 20 4F 6E	rule2 BYTE "2. One user must input a word for the other to guess.",0
	   65 20 75 73 65
	   72 20 6D 75 73
	   74 20 69 6E 70
	   75 74 20 61 20
	   77 6F 72 64 20
	   66 6F 72 20 74
	   68 65 20 6F 74
	   68 65 72 20 74
	   6F 20 67 75 65
	   73 73 2E 00
 0000014A 33 2E 20 54 68	rule3 BYTE "3. The inputted word must be 5 characters.",0
	   65 20 69 6E 70
	   75 74 74 65 64
	   20 77 6F 72 64
	   20 6D 75 73 74
	   20 62 65 20 35
	   20 63 68 61 72
	   61 63 74 65 72
	   73 2E 00
 00000175 34 2E 20 49 66	rule4 BYTE "4. If a string exceeds 5 characters the remaining characters will be dropped.",0
	   20 61 20 73 74
	   72 69 6E 67 20
	   65 78 63 65 65
	   64 73 20 35 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 74 68 65 20
	   72 65 6D 61 69
	   6E 69 6E 67 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 77 69 6C 6C
	   20 62 65 20 64
	   72 6F 70 70 65
	   64 2E 00
 000001C3 35 2E 20 49 66	rule5 BYTE "5. If a string contains less than 5 characters the game ends.",0
	   20 61 20 73 74
	   72 69 6E 67 20
	   63 6F 6E 74 61
	   69 6E 73 20 6C
	   65 73 73 20 74
	   68 61 6E 20 35
	   20 63 68 61 72
	   61 63 74 65 72
	   73 20 74 68 65
	   20 67 61 6D 65
	   20 65 6E 64 73
	   2E 00
 00000201 36 2E 20 59 6F	rule6 BYTE "6. You only have 6 chances to figure out the word.",0
	   75 20 6F 6E 6C
	   79 20 68 61 76
	   65 20 36 20 63
	   68 61 6E 63 65
	   73 20 74 6F 20
	   66 69 67 75 72
	   65 20 6F 75 74
	   20 74 68 65 20
	   77 6F 72 64 2E
	   00
 00000234 37 2E 20 54 68	rule7 BYTE "7. There are a possible 600 points to score.",0
	   65 72 65 20 61
	   72 65 20 61 20
	   70 6F 73 73 69
	   62 6C 65 20 36
	   30 30 20 70 6F
	   69 6E 74 73 20
	   74 6F 20 73 63
	   6F 72 65 2E 00

				;--------------------------------------------------------
				;  Set of options that displays upon running the program
				;--------------------------------------------------------
 00000261 31 00			opt1 BYTE "1",0
 00000263 32 00			opt2 BYTE "2",0
 00000265 33 00			opt3 BYTE "3",0
 00000267 34 00			opt4 BYTE "4",0
 00000269 50 6C 65 61 73	options BYTE "Please select an option: ",0
	   65 20 73 65 6C
	   65 63 74 20 61
	   6E 20 6F 70 74
	   69 6F 6E 3A 20
	   00
 00000283 28 31 2E 29 20	option1 BYTE "(1.) Rules",0
	   52 75 6C 65 73
	   00
 0000028E 28 32 2E 29 20	option2 BYTE "(2.) Helpful Tips",0
	   48 65 6C 70 66
	   75 6C 20 54 69
	   70 73 00
 000002A0 28 33 2E 29 20	option3 BYTE "(3.) How Scoring Works",0
	   48 6F 77 20 53
	   63 6F 72 69 6E
	   67 20 57 6F 72
	   6B 73 00
 000002B7 28 34 2E 29 20	option4 BYTE "(4.) Play Game",0
	   50 6C 61 79 20
	   47 61 6D 65 00
 000002C6 54 79 70 65 20	inputOptionPrompt BYTE "Type the number of the option you would like: ",0
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 74
	   68 65 20 6F 70
	   74 69 6F 6E 20
	   79 6F 75 20 77
	   6F 75 6C 64 20
	   6C 69 6B 65 3A
	   20 00
 000002F5 48 65 72 65 20	helpful BYTE "Here are some helpful tips: ",0
	   61 72 65 20 73
	   6F 6D 65 20 68
	   65 6C 70 66 75
	   6C 20 74 69 70
	   73 3A 20 00
 00000312 31 2E 20 55 73	helpful1 BYTE "1. Use vowels.",0
	   65 20 76 6F 77
	   65 6C 73 2E 00
 00000321 32 2E 20 55 73	helpful2 BYTE "2. Use common letters",0
	   65 20 63 6F 6D
	   6D 6F 6E 20 6C
	   65 74 74 65 72
	   73 00
 00000337 33 2E 20 41 76	helpful3 BYTE "3. Avoid repeat letters not included.",0
	   6F 69 64 20 72
	   65 70 65 61 74
	   20 6C 65 74 74
	   65 72 73 20 6E
	   6F 74 20 69 6E
	   63 6C 75 64 65
	   64 2E 00
 0000035D 54 68 69 73 20	scoring BYTE "This is how the scoring works.",0
	   69 73 20 68 6F
	   77 20 74 68 65
	   20 73 63 6F 72
	   69 6E 67 20 77
	   6F 72 6B 73 2E
	   00
 0000037C 31 2E 20 53 63	scoring1 BYTE "1. Scores are calculated based on number of tries.",0
	   6F 72 65 73 20
	   61 72 65 20 63
	   61 6C 63 75 6C
	   61 74 65 64 20
	   62 61 73 65 64
	   20 6F 6E 20 6E
	   75 6D 62 65 72
	   20 6F 66 20 74
	   72 69 65 73 2E
	   00
 000003AF 32 2E 20 53 63	scoring2 BYTE "2. Scores are summed over a specified number of games.",0
	   6F 72 65 73 20
	   61 72 65 20 73
	   75 6D 6D 65 64
	   20 6F 76 65 72
	   20 61 20 73 70
	   65 63 69 66 69
	   65 64 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 67 61
	   6D 65 73 2E 00
 000003E6 33 2E 20 45 61	scoring3 BYTE "3. Each player has the same number of tries per game.",0
	   63 68 20 70 6C
	   61 79 65 72 20
	   68 61 73 20 74
	   68 65 20 73 61
	   6D 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 74 72
	   69 65 73 20 70
	   65 72 20 67 61
	   6D 65 2E 00
 0000041C 34 2E 20 54 68	scoring4 BYTE "4. The person with the most points wins!",0
	   65 20 70 65 72
	   73 6F 6E 20 77
	   69 74 68 20 74
	   68 65 20 6D 6F
	   73 74 20 70 6F
	   69 6E 74 73 20
	   77 69 6E 73 21
	   00
 00000445 54 68 65 20 69	invalidInput BYTE "The input character is invalid. Your game ends here. Better luck next time!",0
	   6E 70 75 74 20
	   63 68 61 72 61
	   63 74 65 72 20
	   69 73 20 69 6E
	   76 61 6C 69 64
	   2E 20 59 6F 75
	   72 20 67 61 6D
	   65 20 65 6E 64
	   73 20 68 65 72
	   65 2E 20 42 65
	   74 74 65 72 20
	   6C 75 63 6B 20
	   6E 65 78 74 20
	   74 69 6D 65 21
	   00
 00000491  00000002 [		inputOption BYTE 2 DUP(?)
	    00
	   ]


				;--------------------------------------------------------
				; All of the potential messages that are used upon the 
				; completion of the program.
				;--------------------------------------------------------
 00000493 47 6F 6F 64 20	luck BYTE "Good Luck!",0
	   4C 75 63 6B 21
	   00
 0000049E 42 65 74 74 65	fail BYTE "Better Luck Next Time!",0
	   72 20 4C 75 63
	   6B 20 4E 65 78
	   74 20 54 69 6D
	   65 21 00
 000004B5 69 6E 74 65 72	attempt1 BYTE "interesting... ig good job",0
	   65 73 74 69 6E
	   67 2E 2E 2E 20
	   69 67 20 67 6F
	   6F 64 20 6A 6F
	   62 00
 000004D0 57 6F 77 21 20	pass BYTE "Wow! That Was Impressive!",0
	   54 68 61 74 20
	   57 61 73 20 49
	   6D 70 72 65 73
	   73 69 76 65 21
	   00
 000004EA 54 68 61 74 20	ok_message BYTE "That was ok, you can do better.",0
	   77 61 73 20 6F
	   6B 2C 20 79 6F
	   75 20 63 61 6E
	   20 64 6F 20 62
	   65 74 74 65 72
	   2E 00
 0000050A 59 6F 75 20 73	score_message BYTE "You scored: ",0
	   63 6F 72 65 64
	   3A 20 00
 00000517 20 50 6F 69 6E	points_message BYTE " Points",0
	   74 73 00
 0000051F 2D 31 30 30 20	minus_points BYTE "-100 Points!",0
	   50 6F 69 6E 74
	   73 21 00
 0000052C 50 6F 74 65 6E	current_points BYTE "Potential points: ",0
	   74 69 61 6C 20
	   70 6F 69 6E 74
	   73 3A 20 00
 0000053F 54 68 65 20 69	not_valid BYTE "The inputted string is of an invalid size.",0
	   6E 70 75 74 74
	   65 64 20 73 74
	   72 69 6E 67 20
	   69 73 20 6F 66
	   20 61 6E 20 69
	   6E 76 61 6C 69
	   64 20 73 69 7A
	   65 2E 00
 0000056A 54 68 65 20 63	correct_word BYTE "The correct word was: ",0
	   6F 72 72 65 63
	   74 20 77 6F 72
	   64 20 77 61 73
	   3A 20 00

 00000581 00000258		points DWORD 600      ; Initial number of potential points

				;--------------------------------------------------------
				; Messages displayed to the use once the program begins
				; taking input during gameplay.
				;--------------------------------------------------------
 00000585 49 6E 70 75 74	input_string BYTE "Input: ",0
	   3A 20 00
 0000058D 41 74 74 65 6D	attempt_string BYTE "Attempt: ",0
	   70 74 3A 20 00

				;--------------------------------------------------------
				; Variable that is used to store the user input from the 
				; ReadString function. Limit on the number of characters 
				; that can be read from the user by setting size to 5 plus 
				; the null pointer.
				;--------------------------------------------------------
 00000597  00000006 [		user_input BYTE 6 DUP(?)
	    00
	   ]


				;--------------------------------------------------------
				; String given by the user when the program begins, this 
				; is the string that will be used for comparisons from the 
				; user input
				;--------------------------------------------------------
 0000059D  00000006 [		true_string BYTE 6 DUP(?)
	    00
	   ]
 000005A3 49 6E 70 75 74	prompt_message BYTE "Input expected String (INPUT IS HIDDEN): ",0
	   20 65 78 70 65
	   63 74 65 64 20
	   53 74 72 69 6E
	   67 20 28 49 4E
	   50 55 54 20 49
	   53 20 48 49 44
	   44 45 4E 29 3A
	   20 00
 000005CD 57 65 6C 63 6F	welcomeMsg BYTE "Welcome ",0
	   6D 65 20 00
 000005D6  0000000A [		user1 BYTE 10 DUP(?)
	    00
	   ]
 000005E0  0000000A [		user2 BYTE 10 DUP(?)
	    00
	   ]
 000005EA 50 6C 61 79 65	promptUser1 BYTE "Player 1: ",0
	   72 20 31 3A 20
	   00
 000005F5 50 6C 61 79 65	promptUser2 BYTE "Player 2: ",0
	   72 20 32 3A 20
	   00
 00000600 4E 75 6D 62 65	promptNumber BYTE "Number of Rounds (1-5): ",0
	   72 20 6F 66 20
	   52 6F 75 6E 64
	   73 20 28 31 2D
	   35 29 3A 20 00
 00000619 000000000000		pointsUser1 FWORD ?
 0000061F 000000000000		pointsUser2 FWORD ?
 00000625 00000000		numberOfRounds DWORD ?
 00000629 01			index BYTE 1        ; Used for number of attempts

 00000000			.code
				;--------------------------------------------------------
				;                         Main PROC
				; Used as a driver for the program. Call all of the
				; necessary procedures for the program to execute 
				; properly. Calculates the number of attempts as well as
				; the number of points a user can receive.
				;--------------------------------------------------------
 00000000			main PROC
				 ; Call the procedures
 00000000  E8 000001CD		 call DisplayLoad
 00000005  E8 00000000 E	 call ClrScr
 0000000A  BA 000005EA R	 mov edx, OFFSET promptUser1
 0000000F  E8 00000000 E	 call WriteString
 00000014  BA 000005D6 R	 mov edx, OFFSET user1
 00000019  B9 0000000A		 mov ecx, (LENGTHOF user1)
 0000001E  E8 00000000 E	 call ReadString
 00000023  BA 000005CD R	 mov edx, OFFSET welcomeMsg
 00000028  E8 00000000 E	 call WriteString
 0000002D  BA 000005D6 R	 mov edx, OFFSET user1
 00000032  E8 00000000 E	 call WriteString
 00000037  E8 00000000 E	 call Crlf
 0000003C  E8 00000000 E	 call Crlf
 00000041  BA 000005F5 R	 mov edx, OFFSET promptUser2
 00000046  E8 00000000 E	 call WriteString
 0000004B  BA 000005E0 R	 mov edx, OFFSET user2
 00000050  B9 0000000A		 mov ecx, (LENGTHOF user2)
 00000055  E8 00000000 E	 call ReadString
 0000005A  BA 000005CD R	 mov edx, OFFSET welcomeMsg
 0000005F  E8 00000000 E	 call WriteString
 00000064  BA 000005E0 R	 mov edx, OFFSET user2
 00000069  E8 00000000 E	 call WriteString
 0000006E  E8 00000000 E	 call Crlf
 00000073  E8 00000000 E	 call Crlf
 00000078  BA 00000600 R	 mov edx, OFFSET promptNumber
 0000007D  E8 00000000 E	 call WriteString
 00000082  BA 00000625 R	 mov edx, OFFSET numberOfRounds
 00000087  B9 00000001		 mov ecx, (LENGTHOF numberOfRounds)
 0000008C  E8 00000000 E	 call ReadInt
 00000091  B8 00000000		 mov eax, 0
 00000096  3B 05 00000625 R	 cmp eax, [numberOfRounds] 
 0000009C  76 02		 jbe NotValid
 0000009E  77 2F		 ja Good
				 

 000000A0			 NotValid:
 000000A0  E8 00000000 E	  call Crlf
 000000A5  B8 0000000C		  mov eax, (black*16) + lightRed
 000000AA  E8 00000000 E	  call SetTextColor
 000000AF  BA 0000053F R	  mov edx, OFFSET not_valid
 000000B4  E8 00000000 E	  call WriteString
 000000B9  B8 0000000F		  mov eax, (black*16) + white
 000000BE  E8 00000000 E	  call SetTextColor
 000000C3  E8 00000000 E	  call Crlf
				  INVOKE ExitProcess,0
 000000C8  6A 00	   *	    push   +000000000h
 000000CA  E8 00000000 E   *	    call   ExitProcess
				 
 000000CF			 Good:
 000000CF  B8 00000005		  mov eax, 5
 000000D4  3B 05 00000625 R	  cmp eax, [numberOfRounds]
 000000DA  77 C4		  ja NotValid
				 
				 
 000000DC  E8 00000440		 call CollectString             ; Take string from user
 000000E1  E8 00000000 E	 call WaitMsg                
 000000E6  E8 00000000 E	 call Crlf
 000000EB  E8 00000000 E	 call Crlf 

 000000F0  A0 00000629 R	 mov al, index                  ; Initialize number of attempts
 000000F5  BF 00000006		 mov edi,6                      ; Loop decrement varialbe

				;--------------------------------------------------------
				; Driver loop that takes care of the number of attempts
				; of the user. Calculates the number of points the user
				; has earned as well as the number of attempts the user
				; has taken.
				;--------------------------------------------------------
 000000FA			 L1:
 000000FA  BA 0000058D R	  mov edx, OFFSET attempt_string
 000000FF  E8 00000000 E	  call WriteString          
 00000104  E8 00000000 E	  call WriteInt             ; Write the number of attempts
				                            ; to console
 00000109  E8 00000000 E	  call Crlf
 0000010E  57			  push edi                  ; Save values to stack
 0000010F  50			  push eax
 00000110  E8 000004A7		  call ProcessInput         ; Take input from user and process
				                            ; it accordingly

 00000115  A1 00000581 R	  mov eax, points           ; Do point calculations based on
 0000011A  83 E8 64		  sub eax, 100              ; number of attempts
 0000011D  A3 00000581 R	  mov points, eax
 00000122  BA 0000052C R	  mov edx, OFFSET current_points
 00000127  E8 00000000 E	  call WriteString          
 0000012C  A1 00000581 R	  mov eax, points
 00000131  E8 00000000 E	  call WriteInt             ; Print number of points to console
 00000136  BA 00000517 R	  mov edx, OFFSET points_message
 0000013B  E8 00000000 E	  call WriteString
 00000140  E8 00000000 E	  call Crlf
 00000145  E8 00000000 E	  call Crlf
 0000014A  58			  pop eax		            ; Remove value from the stack
 0000014B  FE C0		  inc al
 0000014D  A2 00000629 R	  mov index, al             ; Load the current index into variable
 00000152  5F			  pop edi                   ; Remove value from the stack
 00000153  4F			  dec edi                   ; Decrement loop counter
 00000154  75 A4		  jnz L1

 00000156  B8 0000000C		mov eax, (black*16) + lightRed
 0000015B  E8 00000000 E	call SetTextColor           
 00000160  BA 0000049E R	mov edx, OFFSET fail
 00000165  E8 00000000 E	call WriteString            ; Write faile message
 0000016A  E8 00000000 E	call Crlf
 0000016F  BA 0000050A R	mov edx, OFFSET score_message
 00000174  E8 00000000 E	call WriteString            
 00000179  B0 00		mov al, 0
 0000017B  E8 00000000 E	call WriteInt
 00000180  BA 00000517 R	mov edx, OFFSET points_message
 00000185  E8 00000000 E	call WriteString            ; Write number of points
				                            ; to the console
 0000018A  E8 00000000 E	call Crlf
 0000018F  E8 00000000 E	call Crlf
 00000194  B8 0000000F		mov eax, (black*16) + white
 00000199  E8 00000000 E	call SetTextColor
 0000019E  BA 0000056A R	mov edx, OFFSET correct_word
 000001A3  E8 00000000 E	call WriteString
 000001A8  B8 0000000A		mov eax, (black*16) + lightGreen
 000001AD  E8 00000000 E	call SetTextColor
 000001B2  BA 0000059D R	mov edx, OFFSET true_string
 000001B7  E8 00000000 E	call WriteString
 000001BC  B8 0000001F		mov eax, (black+16) + white
 000001C1  E8 00000000 E	call SetTextColor
 000001C6  E8 00000000 E	call Crlf
				INVOKE ExitProcess,0       ; Once done, exit the program
 000001CB  6A 00	   *	    push   +000000000h
 000001CD  E8 00000000 E   *	    call   ExitProcess
 000001D2			main ENDP

 000001D2			DisplayLoad PROC
 000001D2  B8 0000000D		 mov eax, (black*16) + lightMagenta
 000001D7  E8 00000000 E	 call SetTextColor
 000001DC  B2 19		 mov dl,25					; Change the position of the 
				                            ; text written to the console
 000001DE  B6 00		 mov dh,0
 000001E0  E8 00000000 E	 call GotoXY		
 000001E5  BA 00000000 R	 mov edx, OFFSET intro
 000001EA  E8 00000000 E	 call WriteString			; Write the intro message
 000001EF  E8 00000000 E	 call Crlf
 000001F4  E8 00000000 E	 call Crlf
 000001F9  B8 0000000A		 mov eax, (black*16) + lightGreen
 000001FE  E8 00000000 E	 call SetTextColor
 00000203  BA 00000269 R	 mov edx, OFFSET options
 00000208  E8 00000000 E	 call WriteString
 0000020D  B8 0000000F		 mov eax, (black*16) + white
 00000212  E8 00000000 E	 call SetTextColor
 00000217  E8 00000000 E	 call Crlf
 0000021C  E8 00000000 E	 call Crlf
 00000221  B8 0000000E		 mov eax, (black*16) + yellow
 00000226  E8 00000000 E	 call SetTextColor
 0000022B  BA 00000283 R	 mov edx, OFFSET option1
 00000230  E8 00000000 E	 call WriteString
 00000235  E8 00000000 E	 call Crlf
 0000023A  BA 0000028E R	 mov edx, OFFSET option2
 0000023F  E8 00000000 E	 call WriteString
 00000244  E8 00000000 E	 call Crlf
 00000249  BA 000002A0 R	 mov edx, OFFSET option3
 0000024E  E8 00000000 E	 call WriteString
 00000253  E8 00000000 E	 call Crlf
 00000258  BA 000002B7 R	 mov edx, OFFSET option4
 0000025D  E8 00000000 E	 call WriteString
 00000262  E8 00000000 E	 call Crlf
 00000267  E8 00000000 E	 call Crlf
 0000026C  B8 0000000F		 mov eax, (black*16) + white
 00000271  E8 00000000 E	 call SetTextColor
 00000276  BA 000002C6 R	 mov edx, OFFSET inputOptionPrompt
 0000027B  E8 00000000 E	 call WriteString
 00000280  BA 00000491 R	 mov edx, OFFSET inputOption
 00000285  B9 00000002		 mov ecx, (lengthof inputOption)
 0000028A  B8 0000000A		 mov eax, (black*16) + lightGreen
 0000028F  E8 00000000 E	 call SetTextColor
 00000294  E8 00000000 E	 call ReadString
 00000299  B8 0000000F		 mov eax, (black*16) + white
 0000029E  E8 00000000 E	 call SetTextColor

 000002A3  A0 00000491 R	 mov al, [inputOption]
 000002A8  3A 05 00000261 R	 cmp al, [opt1]
 000002AE  74 26		 je First
 000002B0  3A 05 00000263 R	 cmp al, opt2
 000002B6  74 37		 je Second
 000002B8  3A 05 00000265 R	 cmp al, opt3
 000002BE  0F 84 000000A3	 je Third
 000002C4  3A 05 00000267 R	 cmp al, opt4
 000002CA  0F 84 0000011B	 je Fourth
 000002D0  0F 85 00000117	 jne Invalid
				 
 000002D6			 First:
 000002D6  E8 00000000 E	  call ClrScr
 000002DB  E8 00000142		  call DisplayRules
 000002E0  E8 00000000 E	  call WaitMsg
 000002E5  E8 00000000 E	  call ClrScr
 000002EA  E9 0000012D		  jmp Home

 000002EF			 Second:
 000002EF  E8 00000000 E	  call ClrScr
 000002F4  B8 0000000A		  mov eax, (black*16) + lightGreen
 000002F9  E8 00000000 E	  call SetTextColor
 000002FE  BA 000002F5 R	  mov edx, OFFSET helpful
 00000303  E8 00000000 E	  call WriteString
 00000308  B8 0000000E		  mov eax, (black*16) + yellow
 0000030D  E8 00000000 E	  call SetTextColor
 00000312  E8 00000000 E	  call Crlf
 00000317  E8 00000000 E	  call Crlf
 0000031C  BA 00000312 R	  mov edx, OFFSET helpful1  
 00000321  E8 00000000 E	  call WriteString
 00000326  E8 00000000 E	  call Crlf
 0000032B  BA 00000321 R	  mov edx, OFFSET helpful2
 00000330  E8 00000000 E	  call WriteString
 00000335  E8 00000000 E	  call Crlf
 0000033A  BA 00000337 R	  mov edx, OFFSET helpful3
 0000033F  E8 00000000 E	  call WriteString
 00000344  E8 00000000 E	  call Crlf
 00000349  E8 00000000 E	  call Crlf
 0000034E  B8 0000000F		  mov eax, (black*16) + white
 00000353  E8 00000000 E	  call SetTextColor
 00000358  E8 00000000 E	  call WaitMsg
 0000035D  E8 00000000 E	  call ClrScr
 00000362  E9 000000B5		  jmp Home
				 
 00000367			 Third:
 00000367  E8 00000000 E	  call ClrScr
 0000036C  B8 0000000A		  mov eax, (black*16) + lightGreen
 00000371  E8 00000000 E	  call SetTextColor
 00000376  BA 0000035D R	  mov edx, OFFSET scoring
 0000037B  E8 00000000 E	  call WriteString
 00000380  B8 0000000E		  mov eax, (black*16) + yellow
 00000385  E8 00000000 E	  call SetTextColor
 0000038A  E8 00000000 E	  call Crlf
 0000038F  E8 00000000 E	  call Crlf
 00000394  BA 0000037C R	  mov edx, OFFSET scoring1
 00000399  E8 00000000 E	  call WriteString
 0000039E  E8 00000000 E	  call Crlf
 000003A3  BA 000003AF R	  mov edx, OFFSET scoring2
 000003A8  E8 00000000 E	  call WriteString
 000003AD  E8 00000000 E	  call Crlf
 000003B2  BA 000003E6 R	  mov edx, OFFSET scoring3
 000003B7  E8 00000000 E	  call WriteString
 000003BC  E8 00000000 E	  call Crlf
 000003C1  BA 0000041C R	  mov edx, OFFSET scoring4
 000003C6  E8 00000000 E	  call WriteString
 000003CB  E8 00000000 E	  call Crlf
 000003D0  E8 00000000 E	  call Crlf
 000003D5  B8 0000000F		  mov eax, (black*16) + white
 000003DA  E8 00000000 E	  call SetTextColor
 000003DF  E8 00000000 E	  call WaitMsg
 000003E4  E8 00000000 E	  call ClrScr
 000003E9  EB 31		  jmp Home

 000003EB			 Fourth:
 000003EB  EB 34		  jmp Escape

 000003ED			 Invalid:
 000003ED  B8 0000000C		  mov eax, (black*16) + lightRed
 000003F2  E8 00000000 E	  call SetTextColor
 000003F7  E8 00000000 E	  call Crlf
 000003FC  BA 00000445 R	  mov edx, OFFSET invalidInput
 00000401  E8 00000000 E	  call WriteString
 00000406  B8 0000000F		  mov eax, (black*16) + white
 0000040B  E8 00000000 E	  call SetTextColor
 00000410  E8 00000000 E	  call Crlf
				  INVOKE ExitProcess,0
 00000415  6A 00	   *	    push   +000000000h
 00000417  E8 00000000 E   *	    call   ExitProcess

 0000041C			 Home:
 0000041C  E8 FFFFFDB1		  call DisplayLoad
				    
 00000421			 Escape:
 00000421  C3			  ret 
 00000422			DisplayLoad ENDP

				;--------------------------------------------------------
				;					DisplayRules PROC
				; Output the various rules of the program to the console
				; before it prompts the user for input.
				;--------------------------------------------------------
 00000422			DisplayRules PROC
 00000422  B8 0000000A		 mov eax, (black*16) + lightGreen
 00000427  E8 00000000 E	 call SetTextColor
 0000042C  BA 00000035 R	 mov edx, OFFSET green_message
 00000431  E8 00000000 E	 call WriteString
 00000436  E8 00000000 E	 call Crlf
 0000043B  E8 00000000 E	 call Crlf
 00000440  B8 0000000E		 mov eax, (black*16) + yellow
 00000445  E8 00000000 E	 call SetTextColor
 0000044A  BA 0000006A R	 mov edx, OFFSET yellow_message
 0000044F  E8 00000000 E	 call WriteString
 00000454  E8 00000000 E	 call Crlf
 00000459  E8 00000000 E	 call Crlf
 0000045E  B8 0000000C		 mov eax, (black*16) + lightRed
 00000463  E8 00000000 E	 call SetTextColor
 00000468  BA 000000A2 R	 mov edx, OFFSET red_message
 0000046D  E8 00000000 E	 call WriteString
 00000472  E8 00000000 E	 call Crlf
 00000477  E8 00000000 E	 call Crlf
 0000047C  B8 00000003		 mov eax, (black*16) + cyan
 00000481  E8 00000000 E	 call SetTextColor
 00000486  BA 000000D1 R	 mov edx, OFFSET rule1		
 0000048B  E8 00000000 E	 call WriteString
 00000490  E8 00000000 E	 call Crlf
 00000495  BA 00000114 R	 mov edx, OFFSET rule2		
 0000049A  E8 00000000 E	 call WriteString
 0000049F  E8 00000000 E	 call Crlf
 000004A4  BA 0000014A R	 mov edx, OFFSET rule3
 000004A9  E8 00000000 E	 call WriteString
 000004AE  E8 00000000 E	 call Crlf
 000004B3  BA 00000175 R	 mov edx, OFFSET rule4		
 000004B8  E8 00000000 E	 call WriteString
 000004BD  E8 00000000 E	 call Crlf
 000004C2  BA 000001C3 R	 mov edx, OFFSET rule5		
 000004C7  E8 00000000 E	 call WriteString
 000004CC  E8 00000000 E	 call Crlf
 000004D1  BA 00000201 R	 mov edx, OFFSET rule6
 000004D6  E8 00000000 E	 call WriteString
 000004DB  E8 00000000 E	 call Crlf
 000004E0  BA 00000234 R	 mov edx, OFFSET rule7		
 000004E5  E8 00000000 E	 call WriteString
 000004EA  E8 00000000 E	 call Crlf
 000004EF  B2 1D		 mov dl,29
 000004F1  B6 0E		 mov dh,14
 000004F3  E8 00000000 E	 call GoToXY                ; Change position
 000004F8  B8 0000000D		 mov eax, (black*16) + lightMagenta
 000004FD  E8 00000000 E	 call SetTextColor
 00000502  BA 00000493 R	 mov edx, OFFSET luck		; Output final message
 00000507  E8 00000000 E	 call WriteString
 0000050C  E8 00000000 E	 call Crlf
 00000511  E8 00000000 E	 call Crlf
 00000516  B8 0000000F		 mov eax, (black*16) + white
 0000051B  E8 00000000 E	 call SetTextColor          ; Revert color back
 00000520  C3			 ret
 00000521			DisplayRules ENDP


				;--------------------------------------------------------
				;				    CollectString PROC
				; Procedure that takes input for the value of the string
				; that the comparisons will be paried against.
				;--------------------------------------------------------
 00000521			CollectString PROC
 00000521  BA 000005A3 R	 mov edx, OFFSET prompt_message
 00000526  E8 00000000 E	 call WriteString			; Output message		 
 0000052B  B8 00000000		 mov eax, (black*16) + black
 00000530  E8 00000000 E	 call SetTextColor			; Hide input from user
 00000535  BA 0000059D R	 mov edx, OFFSET true_string
 0000053A  B9 00000006		 mov ecx, (LENGTHOF true_string)
 0000053F  E8 00000000 E	 call ReadString            ; Read input
				 ToUpper edx                ; Call toUpper macro
 00000544  8B F2	     1	 mov esi, edx                  ; Move string to reg
 00000546  B9 00000005	     1	 mov ecx, 5                     ; Counter for loop
 0000054B		     1	 StandardizeCase:
 0000054B  8A 06	     1	  mov al, [esi]
 0000054D  3C 00	     1	  cmp al, 0                     ; Do comparison
 0000054F  74 0E	     1	  je OutLoop                    
 00000551  3C 61	     1	  cmp al, 'a'
 00000553  72 07	     1	  jb NextLetter                 ; Jump
 00000555  3C 7A	     1	  cmp al, 'z'
 00000557  77 03	     1	  ja NextLetter                 ; Jump
 00000559  80 26 DF	     1	  and BYTE PTR [esi], 11011111b
 0000055C		     1	 NextLetter:                    ; Move to next letter
 0000055C  46		     1	  inc esi                       ; in string
 0000055D  EB EC	     1	  jmp StandardizeCase
 0000055F		     1	 OutLoop:                  
 0000055F  B9 00000000	     1	  mov ecx, 0
 00000564  B8 0000000F		 mov eax, (black*16) + white
 00000569  E8 00000000 E	 call SetTextColor			; Revert text color to white
 0000056E  BF 0000059D R	 mov edi, OFFSET [true_string]
 00000573  B9 00000005		 mov ecx, LENGTHOF true_string - 1
 00000578  E8 00000006		 call IsValid		        ; Check if input length is valid
 0000057D  E8 00000000 E	 call Crlf
 00000582  C3			 ret                        ; Return back to callee proc
 00000583			CollectString ENDP


				;--------------------------------------------------------
				;                   IsValid PROC
				; Check validity of the inputted strings. If strings are
				; determined to be invalid. Exit the program. The user
				; must ensure that the length of the string meets the 
				; requirements.
				;--------------------------------------------------------
 00000583			IsValid PROC
 00000583  B0 00		 mov al, 0h                 ; Move null character to register
 00000585  FC			 cld
 00000586  F2/ AE		 repne scasb                ; Search string for null
 00000588  75 31		 jnz Return                 ; If not found
 0000058A  74 00		 jz NotValid                ; If found
				 
 0000058C			 NotValid:
 0000058C  E8 00000000 E	  call Crlf
 00000591  B8 0000000C		  mov eax,(black*16) + lightRed  
 00000596  E8 00000000 E	  call SetTextColor         ; Change text to red
 0000059B  BA 0000053F R	  mov edx, OFFSET not_valid 
 000005A0  E8 00000000 E	  call WriteString          ; Write invalid message
 000005A5  B8 0000000F		  mov eax,(black*16) + white
 000005AA  E8 00000000 E	  call SetTextColor         ; Rever color
 000005AF  E8 00000000 E	  call Crlf
				  INVOKE ExitProcess,0      ; Exit the program
 000005B4  6A 00	   *	    push   +000000000h
 000005B6  E8 00000000 E   *	    call   ExitProcess
				   
 000005BB			 Return:
 000005BB  C3			  ret                       ; Return to callee
 000005BC			IsValid ENDP
				 

				;--------------------------------------------------------
				;					ProcessInput PROC
				; Procedure takes input from the user and compares it to
				; a selected word from the list provided to check for
				; the correctness of the users inputted value.
				;--------------------------------------------------------
 000005BC			ProcessInput PROC
 000005BC  BA 00000585 R	 mov edx, OFFSET input_string       
 000005C1  E8 00000000 E	 call WriteString           ; Output input header

 000005C6  BA 00000597 R	 mov edx, OFFSET user_input         
 000005CB  B9 00000006		 mov ecx, (LENGTHOF user_input) 
 000005D0  E8 00000000 E	 call ReadString            ; Take user input
				 
				 ToUpper edx                ; Call toUpper macro
 000005D5  8B F2	     1	 mov esi, edx                  ; Move string to reg
 000005D7  B9 00000005	     1	 mov ecx, 5                     ; Counter for loop
 000005DC		     1	 StandardizeCase:
 000005DC  8A 06	     1	  mov al, [esi]
 000005DE  3C 00	     1	  cmp al, 0                     ; Do comparison
 000005E0  74 0E	     1	  je OutLoop                    
 000005E2  3C 61	     1	  cmp al, 'a'
 000005E4  72 07	     1	  jb NextLetter                 ; Jump
 000005E6  3C 7A	     1	  cmp al, 'z'
 000005E8  77 03	     1	  ja NextLetter                 ; Jump
 000005EA  80 26 DF	     1	  and BYTE PTR [esi], 11011111b
 000005ED		     1	 NextLetter:                    ; Move to next letter
 000005ED  46		     1	  inc esi                       ; in string
 000005EE  EB EC	     1	  jmp StandardizeCase
 000005F0		     1	 OutLoop:                  
 000005F0  B9 00000000	     1	  mov ecx, 0

 000005F5  BF 00000597 R	 mov edi, OFFSET [user_input]
 000005FA  B9 00000005		 mov ecx, LENGTHOF user_input - 1 
 000005FF  E8 FFFFFF7F		 call IsValid               ; Check to see if input is
				                            ; valid

 00000604  BA 0000058D R	 mov edx, OFFSET attempt_string     
 00000609  E8 00000000 E	 call WriteString           ; Output attempt header
				 
				 ; Initialize register values with input from the users
 0000060E  BF 0000059D R	 mov edi, OFFSET [true_string]      
 00000613  BE 00000597 R	 mov esi, OFFSET [user_input]
				 
 00000618  B9 00000006		 mov ecx, LENGTHOF true_string
 0000061D  F3/ A6		 repe cmpsb                 ; Check to see if strings match 
 0000061F  83 F9 00		 cmp ecx, 0
 00000622  74 06		 je CompleteEqual           ; If equal output to user and 
				                            ; terminate program
 00000624  0F 85 00000090	 jne NotEqual               ; If not jump to NotEqual


				;--------------------------------------------------------
				; If compare function jumps, the strings are exact
				; matches. In this case, output the number of points to
				; the user and congratulate. Once, completed. Terminate
				; the program.
				;--------------------------------------------------------
 0000062A			 CompleteEqual:            
 0000062A  B8 0000000A		  mov eax,(black*16) + lightGreen 
 0000062F  E8 00000000 E	  call SetTextColor         ; Change text color to light green
 00000634  BA 00000597 R	  mov edx, OFFSET user_input
 00000639  E8 00000000 E	  call WriteString          ; Print user inputted value
 0000063E  E8 00000000 E	  call Crlf
 00000643  E8 00000000 E	  call Crlf

 00000648  A1 00000581 R	  mov eax, points
				  
 0000064D  3D 00000258		  cmp eax, 600              ; Determine output based on 
 00000652  74 09		  je Impossible             ; number of points acquired
 00000654  3D 0000012C		  cmp eax, 300
 00000659  73 0E		  jae Good
 0000065B  72 18		  jb Ok
				  
 0000065D			  Impossible:               ; If guessed correctly first try
 0000065D  BA 000004B5 R	   mov edx, OFFSET attempt1
 00000662  E8 00000000 E	   call WriteString         ; Write string
 00000667  EB 18		   jmp Break               
				  
 00000669			  Good:                     ; If gotten within four tries
 00000669  BA 000004D0 R	   mov edx, OFFSET pass
 0000066E  E8 00000000 E	   call WriteString         ; Write string
 00000673  EB 0C		   jmp Break
				  
 00000675			  Ok:                       ; If gotten in 5 or 6 tries
 00000675  BA 000004EA R	   mov edx, OFFSET ok_message
 0000067A  E8 00000000 E	   call WriteString         ; Write string
 0000067F  EB 00		   jmp Break
				  
 00000681			  Break:                    ; Output messages to user, terminate
 00000681  B8 0000000F		   mov eax, (black*16) + white
 00000686  E8 00000000 E	   call SetTextColor        ; Revert textcolor
 0000068B  E8 00000000 E	   call Crlf
 00000690  BA 0000050A R	   mov edx, OFFSET score_message
 00000695  E8 00000000 E	   call WriteString         ; Output leading score message
 0000069A  A1 00000581 R	   mov eax, points          
 0000069F  E8 00000000 E	   call WriteInt            ; Output number of points
 000006A4  BA 00000517 R	   mov edx, OFFSET points_message
 000006A9  E8 00000000 E	   call WriteString         ; Follow by the unit (Points)
 000006AE  E8 00000000 E	   call Crlf
				   INVOKE ExitProcess,0     ; Terminate the program
 000006B3  6A 00	   *	    push   +000000000h
 000006B5  E8 00000000 E   *	    call   ExitProcess

				;--------------------------------------------------------
				; If the input did not match the correct string. Iterate 
				; through the two strings and determine the color of the
				; character to output to the console.Once completed return 
				; to main and continue iterating through the program until
				; either, the correct string is inputted or the number of 
				; tries has run out.
				;--------------------------------------------------------

 000006BA			 NotEqual:                  ; If complete equality was not acheived
 000006BA  BF 00000597 R	  mov edi, OFFSET [user_input]       ; Reinitialize registers
 000006BF  BE 0000059D R	  mov esi, OFFSET [true_string]
 000006C4  B1 01		  mov cl, 1                 ; Initialize counter register
 000006C6			  outer:                    ; Iterate through characters in string
 000006C6  8A 07		   mov al, [edi]            ; Byte comparison for strings
 000006C8  8A 16		   mov dl, [esi]
 000006CA  3A C2		   cmp al, dl               ; Check for equality
 000006CC  74 02		   je DirectMatch           ; If character match
 000006CE  75 1D		   jne PotentialMatch       ; Else

 000006D0			   DirectMatch:             ; Given that the characters match
 000006D0  B8 0000000A		    mov eax,(black*16) + lightGreen
 000006D5  E8 00000000 E	    call SetTextColor       ; Change text color
 000006DA  8A 07		    mov al, [edi]
 000006DC  E8 00000000 E	    call WriteChar          ; Output character
 000006E1  B8 0000000F		    mov eax,(black*16) + white
 000006E6  E8 00000000 E	    call SetTextColor       ; Revert text color
 000006EB  EB 55		    jmp Escape              ; Jump to Escape

 000006ED			   PotentialMatch:          ; Check to see if instance of character
 000006ED  8A 07		    mov al, [edi]           ; exists within the user inputted string
 000006EF  56			    push esi                
 000006F0  57			    push edi                ; Store values on stack
 000006F1  51			    push ecx
 000006F2  BF 0000059D R	    mov edi, OFFSET [true_string]
 000006F7  B9 00000006		    mov ecx, LENGTHOF true_string 
 000006FC  FC			    cld
 000006FD  F2/ AE		    repne scasb             ; Check for instance of inputted character
 000006FF  59			    pop ecx                 ; in given string
 00000700  5F			    pop edi
 00000701  5E			    pop esi                 ; Pop all of the values from the stack
 00000702  8A 07		    mov al, [edi]
 00000704  75 1F		    jnz NotFound            ; If no instance of character
 00000706  74 00		    jz Found                ; Else

 00000708			   Found:                   ; If character exists within the string
 00000708  B8 0000000E		    mov eax,(black*16) + yellow
 0000070D  E8 00000000 E	    call SetTextColor       ; Change text color
 00000712  8A 07		    mov al, [edi]
 00000714  E8 00000000 E	    call WriteChar          ; Output character
 00000719  B8 0000000F		    mov eax,(black*16) + white
 0000071E  E8 00000000 E	    call SetTextColor       ; Revert text color
 00000723  EB 1D		    jmp Escape              ; Jump to escape

 00000725			   NotFound:                ; If not instance of character is found
 00000725  B8 0000000C		    mov eax,(black*16) + lightRed
 0000072A  E8 00000000 E	    call SetTextColor       ; Change color of output
 0000072F  8A 07		    mov al, [edi]       
 00000731  E8 00000000 E	    call WriteChar          ; Write character to console
 00000736  B8 0000000F		    mov eax,(black*16) + white
 0000073B  E8 00000000 E	    call SetTextColor       ; Revert text color
 00000740  EB 00		    jmp Escape              ; Jump to escape

 00000742			   Escape:                  ; Increment the loop until no longer
 00000742  46			    inc esi                 ; valid. Check every characeter in
 00000743  47			    inc edi                 ; string.
 00000744  FE C1		    inc cl
 00000746  80 F9 06		    cmp cl, 6
 00000749  0F 85 FFFFFF77	    jne outer

 0000074F  E8 00000000 E	 call Crlf
 00000754  E8 00000000 E	 call Crlf
 00000759  BA 0000051F R	 mov edx, OFFSET minus_points
 0000075E  E8 00000000 E	 call WriteString           ; Out number of points lost
 00000763  E8 00000000 E	 call Crlf
 00000768  C3			 ret                        ; Return to driver loop in main PROC
 00000769			ProcessInput ENDP
				END main

Microsoft (R) Macro Assembler Version 14.29.30147.0	    11/27/22 22:01:48
wordle.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

ToUpper  . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000062A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000769 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CollectString  . . . . . . . . .	P Near	 00000521 _TEXT	Length= 00000062 Public STDCALL
  StandardizeCase  . . . . . . .	L Near	 0000054B _TEXT	
  NextLetter . . . . . . . . . .	L Near	 0000055C _TEXT	
  OutLoop  . . . . . . . . . . .	L Near	 0000055F _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayLoad  . . . . . . . . . .	P Near	 000001D2 _TEXT	Length= 00000250 Public STDCALL
  First  . . . . . . . . . . . .	L Near	 000002D6 _TEXT	
  Second . . . . . . . . . . . .	L Near	 000002EF _TEXT	
  Third  . . . . . . . . . . . .	L Near	 00000367 _TEXT	
  Fourth . . . . . . . . . . . .	L Near	 000003EB _TEXT	
  Invalid  . . . . . . . . . . .	L Near	 000003ED _TEXT	
  Home . . . . . . . . . . . . .	L Near	 0000041C _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000421 _TEXT	
DisplayRules . . . . . . . . . .	P Near	 00000422 _TEXT	Length= 000000FF Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsValid  . . . . . . . . . . . .	P Near	 00000583 _TEXT	Length= 00000039 Public STDCALL
  NotValid . . . . . . . . . . .	L Near	 0000058C _TEXT	
  Return . . . . . . . . . . . .	L Near	 000005BB _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ProcessInput . . . . . . . . . .	P Near	 000005BC _TEXT	Length= 000001AD Public STDCALL
  StandardizeCase  . . . . . . .	L Near	 000005DC _TEXT	
  NextLetter . . . . . . . . . .	L Near	 000005ED _TEXT	
  OutLoop  . . . . . . . . . . .	L Near	 000005F0 _TEXT	
  CompleteEqual  . . . . . . . .	L Near	 0000062A _TEXT	
  Impossible . . . . . . . . . .	L Near	 0000065D _TEXT	
  Good . . . . . . . . . . . . .	L Near	 00000669 _TEXT	
  Ok . . . . . . . . . . . . . .	L Near	 00000675 _TEXT	
  Break  . . . . . . . . . . . .	L Near	 00000681 _TEXT	
  NotEqual . . . . . . . . . . .	L Near	 000006BA _TEXT	
  outer  . . . . . . . . . . . .	L Near	 000006C6 _TEXT	
  DirectMatch  . . . . . . . . .	L Near	 000006D0 _TEXT	
  PotentialMatch . . . . . . . .	L Near	 000006ED _TEXT	
  Found  . . . . . . . . . . . .	L Near	 00000708 _TEXT	
  NotFound . . . . . . . . . . .	L Near	 00000725 _TEXT	
  Escape . . . . . . . . . . . .	L Near	 00000742 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001D2 Public STDCALL
  NotValid . . . . . . . . . . .	L Near	 000000A0 _TEXT	
  Good . . . . . . . . . . . . .	L Near	 000000CF _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000000FA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
attempt1 . . . . . . . . . . . .	Byte	 000004B5 _DATA	
attempt_string . . . . . . . . .	Byte	 0000058D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correct_word . . . . . . . . . .	Byte	 0000056A _DATA	
current_points . . . . . . . . .	Byte	 0000052C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fail . . . . . . . . . . . . . .	Byte	 0000049E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green_message  . . . . . . . . .	Byte	 00000035 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
helpful1 . . . . . . . . . . . .	Byte	 00000312 _DATA	
helpful2 . . . . . . . . . . . .	Byte	 00000321 _DATA	
helpful3 . . . . . . . . . . . .	Byte	 00000337 _DATA	
helpful  . . . . . . . . . . . .	Byte	 000002F5 _DATA	
index  . . . . . . . . . . . . .	Byte	 00000629 _DATA	
inputOptionPrompt  . . . . . . .	Byte	 000002C6 _DATA	
inputOption  . . . . . . . . . .	Byte	 00000491 _DATA	
input_string . . . . . . . . . .	Byte	 00000585 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
invalidInput . . . . . . . . . .	Byte	 00000445 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
luck . . . . . . . . . . . . . .	Byte	 00000493 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus_points . . . . . . . . . .	Byte	 0000051F _DATA	
not_valid  . . . . . . . . . . .	Byte	 0000053F _DATA	
numberOfRounds . . . . . . . . .	DWord	 00000625 _DATA	
ok_message . . . . . . . . . . .	Byte	 000004EA _DATA	
opt1 . . . . . . . . . . . . . .	Byte	 00000261 _DATA	
opt2 . . . . . . . . . . . . . .	Byte	 00000263 _DATA	
opt3 . . . . . . . . . . . . . .	Byte	 00000265 _DATA	
opt4 . . . . . . . . . . . . . .	Byte	 00000267 _DATA	
option1  . . . . . . . . . . . .	Byte	 00000283 _DATA	
option2  . . . . . . . . . . . .	Byte	 0000028E _DATA	
option3  . . . . . . . . . . . .	Byte	 000002A0 _DATA	
option4  . . . . . . . . . . . .	Byte	 000002B7 _DATA	
options  . . . . . . . . . . . .	Byte	 00000269 _DATA	
pass . . . . . . . . . . . . . .	Byte	 000004D0 _DATA	
pointsUser1  . . . . . . . . . .	FWord	 00000619 _DATA	
pointsUser2  . . . . . . . . . .	FWord	 0000061F _DATA	
points_message . . . . . . . . .	Byte	 00000517 _DATA	
points . . . . . . . . . . . . .	DWord	 00000581 _DATA	
promptNumber . . . . . . . . . .	Byte	 00000600 _DATA	
promptUser1  . . . . . . . . . .	Byte	 000005EA _DATA	
promptUser2  . . . . . . . . . .	Byte	 000005F5 _DATA	
prompt_message . . . . . . . . .	Byte	 000005A3 _DATA	
red_message  . . . . . . . . . .	Byte	 000000A2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rule1  . . . . . . . . . . . . .	Byte	 000000D1 _DATA	
rule2  . . . . . . . . . . . . .	Byte	 00000114 _DATA	
rule3  . . . . . . . . . . . . .	Byte	 0000014A _DATA	
rule4  . . . . . . . . . . . . .	Byte	 00000175 _DATA	
rule5  . . . . . . . . . . . . .	Byte	 000001C3 _DATA	
rule6  . . . . . . . . . . . . .	Byte	 00000201 _DATA	
rule7  . . . . . . . . . . . . .	Byte	 00000234 _DATA	
ruleIntro  . . . . . . . . . . .	Byte	 00000013 _DATA	
score_message  . . . . . . . . .	Byte	 0000050A _DATA	
scoring1 . . . . . . . . . . . .	Byte	 0000037C _DATA	
scoring2 . . . . . . . . . . . .	Byte	 000003AF _DATA	
scoring3 . . . . . . . . . . . .	Byte	 000003E6 _DATA	
scoring4 . . . . . . . . . . . .	Byte	 0000041C _DATA	
scoring  . . . . . . . . . . . .	Byte	 0000035D _DATA	
true_string  . . . . . . . . . .	Byte	 0000059D _DATA	
user1  . . . . . . . . . . . . .	Byte	 000005D6 _DATA	
user2  . . . . . . . . . . . . .	Byte	 000005E0 _DATA	
user_input . . . . . . . . . . .	Byte	 00000597 _DATA	
welcomeMsg . . . . . . . . . . .	Byte	 000005CD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow_message . . . . . . . . .	Byte	 0000006A _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
